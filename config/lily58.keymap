/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        layer_three {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };



        behaviors{
         gqt: global-quick-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "GLOBAL_QUICK_TAP";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <200>;
                quick-tap-ms = <100>;
                global-quick-tap;
                bindings = <&mo>, <&kp>;
                };
        };
 };

// ADD TAP DANCE FOR SHIFT KEY THAT WHEN DOUBLE TAPPED TURNS INTO CAPS
/{
        keymap {
                compatible = "zmk,keymap";
                default_layer {
                         bindings = <
   &kp ESC          &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                                  &kp N6 &kp N7 &kp N8 &kp N9     &kp N0     &kp TAB
   &mt LCTRL TAB    &kp Q  &kp W  &kp E  &kp R  &kp T                                   &kp Y  &kp U  &kp I  &kp O      &kp P      &kp TAB      
   &kp LALT         &kp A  &kp S  &kp D  &kp F  &kp G                                   &kp H  &kp J  &kp K  &kp L      &kp SEMI   &kp TAB
   &sk LSHFT        &kp Z  &kp X  &kp C  &kp V  &kp FSLH  &kp LG(MINUS)    &kp LG(PLUS) &kp B  &kp N  &kp M  &kp COMMA  &kp DOT    &kp RCMD   
                 &trans &kp LCMD  &gqt 2 SPACE  &sk LSHFT                               &mt RSHIFT RET   &gqt 1 BSPC  &kp CAPS  &trans                                
                        >;                                                                                     
                };                                                                                                       

                layer_one {  
                        bindings = <
   &trans  &trans  &trans  &trans  &trans  &trans                                         &trans        &trans        &trans    &trans      &trans             &trans              
   &trans  &none   &kp N1  &kp N2  &kp N3  &kp GRAVE                                      &kp C_VOL_DN  &kp C_VOL_UP  &kp UP    &kp C_PREV  &kp C_PP           &kp C_NEXT 
   &trans  &kp N0  &kp N4  &kp N5  &kp N6  &kp CARET                                      &kp C_MUTE    &kp LEFT      &kp DOWN  &kp RIGHT   &kp C_AC_ZOOM_IN   &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS
   &trans  &none   &kp N7  &kp N8  &kp N9  &kp DLLR  &kp LG(NUMBER_0)     &kp LC(RA(RET)) &kp C_BRI_DN  &kp C_BRI_UP  &trans    &trans      &trans             &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS
                   &trans &trans  &trans   &trans                                         &trans  &trans  &trans  &trans 
                        >;    
                };

                layer_two {
                        bindings = <
   &kp F1     &kp F2     &kp F3  &kp F4  &kp F5   &kp F6                                              &kp F7     &kp F8    &kp F9    &kp F10    &kp F11   &kp F12
   &kp AT     &kp AMPS   &kp N1  &kp N2  &kp N3   &kp UNDER                                           &kp PLUS   &kp LPAR  &kp RPAR  &kp APOS   &kp PIPE  &kp STAR 
   &kp HASH   &kp N0     &kp N4  &kp N5  &kp N6   &kp EXCL                                            &kp MINUS  &kp LBKT  &kp RBKT  &kp DQT    &kp LT    &kp GT
   &kp PRCNT  &kp TILDE  &kp N7  &kp N8  &kp N9   &kp QMARK  &kp LC(RA(LEFT))     &kp LC(RA(RIGHT))   &kp EQUAL  &kp LBRC  &kp RBRC  &kp COMMA  &kp DOT   &kp BSLH
                          &trans &trans  &trans   &trans                                              &trans  &trans  &trans  &trans
                        >;
                };

                layer_three {
                        bindings = <
   &trans        &trans        &trans      &trans   &trans   &trans            &trans  &trans  &trans  &trans   &trans   &trans              
   &bt BT_NXT    &out OUT_TOG  &kp GRAVE   &trans   &trans   &trans            &trans  &trans  &trans  &trans   &trans   &trans 
   &bt BT_PRV    &trans        &kp CARET   &trans   &trans   &trans            &trans  &trans  &trans  &trans   &ext_power EP_ON   &sys_reset 
   &bt BT_CLR    &trans        &kp DLLR    &trans   &trans   &trans &trans     &trans  &trans  &trans  &trans   &trans    &ext_power EP_OFF  &ext_power EP_TOG  
                                      &trans &trans  &trans  &trans            &trans  &trans  &trans  &trans 
                        >;
                };                           
        };
};


